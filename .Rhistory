library(kpcalg)
?curve
den.p = function(x){x+1}
den.p = function(x){x^3}
curve(den.p, -3, 3)
2^(1/3) * 3^(2/3)
den.p = function(a){
fenmu1 = 2^(1/3) * 3^(2/3)
fenzi1_limian = sqrt(3) * sqrt(27 * a^2 + 4) - 9 * a
fenzi1 = ifelse(fenzi1_limian < 0, -abs(fenzi1_limian)^(1/3),
fenzi1_limian^(1/3))
term1 = fenzi1 / fenmu1
fenzi2 = (2/3)^(1/3)
fenmu2_limian = sqrt(3) * sqrt(27 * a^2 + 4) - 9 * a
fenmu2 = ifelse(fenmu2_limian < 0, -abs(fenmu2_limian)^(1/3),
fenmu2_limian^(1/3))
term2 = fenzi2 / fenmu2
ter1 - term2
}
den.p = function(a){
fenmu1 = 2^(1/3) * 3^(2/3)
fenzi1_limian = sqrt(3) * sqrt(27 * a^2 + 4) - 9 * a
fenzi1 = ifelse(fenzi1_limian < 0, -abs(fenzi1_limian)^(1/3),
fenzi1_limian^(1/3))
term1 = fenzi1 / fenmu1
fenzi2 = (2/3)^(1/3)
fenmu2_limian = sqrt(3) * sqrt(27 * a^2 + 4) - 9 * a
fenmu2 = ifelse(fenmu2_limian < 0, -abs(fenmu2_limian)^(1/3),
fenmu2_limian^(1/3))
term2 = fenzi2 / fenmu2
term1 - term2
}
curve(den.p, -3, 3)
?curve
curve(den.p, -3, 3)
den.p(0)
den.p(0.027)
den.p(10)
curve(den.p, -5, 5)
curve(den.p, -1, 1)
a = rnorm(2000)
b = den.p(a)
hist(b)
a = rnorm(20000)
b = den.p(a)
hist(b)
hist(b, breaks = 100)
a = rnorm(20000)
b = den.p(a)
hist(b, breaks = 100)
a = rnorm(20000)
b = den.p(a)
hist(b, breaks = 100)
a = runif(20000)
b = den.p(a)
hist(b, breaks = 100)
a = runif(20000)
b = den.p(a)
hist(b, breaks = 100)
a = runif(20000, -1, 1)
b = den.p(a)
hist(b, breaks = 100)
plot(x, y, xlim = c(-2, 2), ylim = c(-10, 10), pch = ".")
x = rnorm(2000000, 0, 1)
names(x) = 1:200000
n = rnorm(2000000, 0, 1)
y = x^3+ n
y = x + x^3+ n
plot(x, y, xlim = c(-2, 2), ylim = c(-10, 10), pch = ".")
x = rnorm(20000, 0, 1)
names(x) = 1:20000
n = rnorm(20000, 0, 1)
plot(x, y, xlim = c(-2, 2), ylim = c(-10, 10), pch = ".")
x = rnorm(20000, 0, 1)
names(x) = 1:20000
n = rnorm(20000, 0, 1)
y = x + x^3+ n
plot(x, y, xlim = c(-2, 2), ylim = c(-10, 10), pch = ".")
curve(den.p)
curve(dnorm, -1, 1)
curve(dnorm, -5, 5)
hist(y)
hist(y, breaks = 100)
hist(y, breaks = 1000)
dz = function(z, y) {
z^2 * exp(-.5 * (z^3 - y))
}
y = 0
dz(seq(-3, 3, by = .01), y)
y_val = dz(seq(-3, 3, by = .01), y)
x_val = seq(-3, 3, by = .01)
y_val = dz(x_val, y)
plot(x_val, y_val)
x_val = seq(-10, 10, by = .01)
y_val = dz(x_val, y)
plot(x_val, y_val)
hist(y_val)
hist(y_val, 1000)
hist(y_val, 100)
dz = function(z, y) {
z^2 * exp(-.5 * (z^3 - y)^2)
}
y = 0
x_val = seq(-10, 10, by = .01)
y_val = dz(x_val, y)
plot(x_val, y_val)
plot(x_val, y_val, type = "l")
y = 1
x_val = seq(-10, 10, by = .01)
y_val = dz(x_val, y)
plot(x_val, y_val, type = "l")
y = 3
x_val = seq(-10, 10, by = .01)
y_val = dz(x_val, y)
plot(x_val, y_val, type = "l")
y = -1
x_val = seq(-10, 10, by = .01)
y_val = dz(x_val, y)
plot(x_val, y_val, type = "l")
dz = function(z, y) {
1/sqrt(2 * pi) * z^2 * exp(-.5 * (z^3 - y)^2)
}
y = -1
x_val = seq(-10, 10, by = .01)
y_val = dz(x_val, y)
plot(x_val, y_val, type = "l")
y = -1
x_val = seq(-3, 3, by = .01)
y_val = dz(x_val, y)
plot(x_val, y_val, type = "l")
output = as.data.frame(matrix(NULL, ncol = 2))
output = as.data.frame(matrix(NA, ncol = 2))
output
sessionInfo()
system()
gc()
?memory.limit
memory.size()
?mem.limits
memory.limit(size = 6*1024)
memory.size
memory.size()
load("~/Desktop/天池竞赛/atec_anti_fraud_train.csv/output_image.RData")
rm(lrn_tmp, pred, task, train, z, test_ind, train_ind)
save.image("~/Dropbox/516Data/Project/天池竞赛/output_image.RData")
library(xgboost)
data(agaricus.train, package='xgboost')
data(agaricus.test, package='xgboost')
dtrain <- xgb.DMatrix(agaricus.train$data, label = agaricus.train$label)
dtest <- xgb.DMatrix(agaricus.test$data, label = agaricus.test$label)
watchlist <- list(train = dtrain, eval = dtest)
## A simple xgb.train example:
param <- list(max_depth = 2, eta = 1, silent = 1, nthread = 2,
objective = "binary:logistic", eval_metric = "auc")
bst <- xgb.train(param, dtrain, nrounds = 2, watchlist)
pred <- predict(bst, agaricus.test$data)
head(pred, 20)
head(pred, 20) > .5
head(pred, 20) > .5
head(agaricus.test$label)
head(agaricus.test$label, 20)
ifelse(head(pred, 20) > .5, 1, 0)
library(prospectr)
?shenkWest
shenkWest()
shenkWest
?naes
library(prospectr)
?puchwein
example("puchwein")
sel$leverage
?rexp
?rnorm
rnorm(10, 1:10, 1)
?delayedAssign
msg = "old"
delayedAssign("x", msg)
x
msg = "old"
delayedAssign("x", msg)
x
msg = "new"
x
rm(x)
delayedAssign("x", msg)
msg = "new"
x
rm(x)
delayedAssign("x", msg)
substitute(x)
?substitute
?plot
plot(cars)
a = plot(cars)
str(a)
a
print(a)
install.packages(c("broom", "caTools", "clipr", "csvy", "dotCall64", "dplyr", "evaluate", "fst", "geoR", "ggplot2", "glue", "gmp", "haven", "highr", "igraph", "iterators", "lava", "mlrCPO", "munsell", "ParamHelpers", "pcalg", "pillar", "Rcpp", "RcppArmadillo", "rmarkdown", "robustbase", "spam", "stringi", "varhandle", "XML", "yaml", "zoo"))
?setwd
setwd("~/Dropbox")
setwd("~")
a = setwd("~/Dropbox")
a
setwd(a)
?setwd
?integrate
integrate(dnorm, -2, 2)
integrate(dnorm, -Inf, Inf)
library(wordcloud2)
install.packages("wordcloud2")
library(wordcloud2)
df = "text ming text ming so that that"
wordcloud2(df)
df = as.data.frame(df)
wordcloud2(df)
wordcloud2(df[1])
wordcloud2(df[,1])
df
?wordcloud2
library(wordcloud2)
?wordcloud2
library(psych)
?fa.parallel
fa.parallel
setwd("~/Documents/Kaggle/Kaggle_Digit_Recognizer")
library(rio)
train = import("./data/train.csv")
test = import("./data/test.csv")
str(train)
task = makeClassifTask(data = train, target = "label")
library(mlr)
task = makeClassifTask(data = train, target = "label")
task
task_train = makeClassifTask(data = train, target = "label")
task_train
lrn_nnet = makeLearner("classif.nnet", predict.type = "prob")
?nnet
7000/4200
7000/42000
42000*.7
42000*.8
42000*.7
p = .7
train_ind = 1:(42000 * p)
test_ind = (42000 * p + 1):42000
?train
mod_nnet = train(lrn_nnet, task_train, subset = train_ind)
?nnet
lrn_nnet = makeLearner("classif.nnet", predict.type = "prob",
size = 2)
mod_nnet = train(lrn_nnet, task_train, subset = train_ind)
